version: "3.0"

services: 
    # docker 容器启动的 redis 默认是没有 redis.conf 的配置文件，所以用 docker 启动 redis 之前，需要先去官网下载 redis.conf 的配置文件
    redis002_s: # 服务名称
        container_name: redis002 # 容器名称
        image: redis:latest # 使用官方镜像
        # 配置redis.conf方式启动
        # 设置redis登录密码 123456
        # --appendonly yes：这个命令用于开启 redis 数据持久化
        # 无需配置文件方式启动
        # command: redis-server /usr/local/etc/redis/redis.conf --requirepass 123456 --appendonly yes 
        command: redis-server /usr/local/etc/redis/redis.conf
        ports:
            - 6379:6379 # 本机端口:容器端口
        restart: on-failure # 自动重启
        volumes:
            - ./deploy/redis/db:/data # 把持久化数据挂载到宿主机
            - ./deploy/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf # 把redis的配置文件挂载到宿主机
            - ./deploy/redis/logs:/logs # 用来存放日志
        environment:
            - TZ=Asia/Shanghai  # 解决容器时区的问题
        networks:
            - network_server002 # 网络名称

    mysql002_s:
        container_name: mysql002
        image: mysql:latest
        ports: 
            - 3306:3306
        restart: on-failure
        environment: 
            MYSQL_DATABASE: goggles-dev
            MYSQL_ROOT_PASSWORD: 123456
            MYSQL_USER: root
            MYSQL_PASSWORD: 123456
            MYSQL_ROOT_HOST: '%'
        volumes:
            - ./deploy/mysql/db:/var/lib/mysql # 用来存放了数据库表文件
            - ./deploy/mysql/conf/my.cnf:/etc/my.cnf # 存放自定义的配置文件
            # 在启动 mysql 容器时自动创建需要的数据库和表
            # mysql官方镜像中提供了容器启动时自动 docker-entrypoint-initdb.d 下的脚本的功能
            # - ./deploy/mysql/init:/docker-entrypoint-initdb.d/ # 存放初始化的脚本
        networks: 
            - network_server002

    nestjs002_s: # nestjs服务
        container_name: nestjs002
        build: # 根据 Dockerfile 构建镜像
            context: .
            dockerfile: Dockerfile
        ports: 
            - 8080:8080
        restart: on-failure # 设置自动重启，这一步必须设置，主要是存在 mysql 还没有启动完成就启动 node 服务
        networks: 
            - network_server002
        depends_on: # node 服务依赖于 mysql 和 redis
            - redis002_s
            - mysql002_s

# 声明一下网桥
# 重要：将所有服务都挂载在同一网桥即可通过容器名来互相通信
# 如 nestjs 连接 mysql 和 redis 可以通过容器名来互相通信
networks:
    network_server002:
        driver: bridge
